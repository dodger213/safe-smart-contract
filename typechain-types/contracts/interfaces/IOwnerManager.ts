/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IOwnerManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addOwnerWithThreshold"
      | "changeThreshold"
      | "getOwners"
      | "getThreshold"
      | "isOwner"
      | "removeOwner"
      | "swapOwner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AddedOwner" | "ChangedThreshold" | "RemovedOwner"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addOwnerWithThreshold",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOwner",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addOwnerWithThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapOwner", data: BytesLike): Result;
}

export namespace AddedOwnerEvent {
  export type InputTuple = [owner: AddressLike];
  export type OutputTuple = [owner: string];
  export interface OutputObject {
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangedThresholdEvent {
  export type InputTuple = [threshold: BigNumberish];
  export type OutputTuple = [threshold: bigint];
  export interface OutputObject {
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemovedOwnerEvent {
  export type InputTuple = [owner: AddressLike];
  export type OutputTuple = [owner: string];
  export interface OutputObject {
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOwnerManager extends BaseContract {
  connect(runner?: ContractRunner | null): IOwnerManager;
  waitForDeployment(): Promise<this>;

  interface: IOwnerManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addOwnerWithThreshold: TypedContractMethod<
    [owner: AddressLike, _threshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeThreshold: TypedContractMethod<
    [_threshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  getOwners: TypedContractMethod<[], [string[]], "view">;

  getThreshold: TypedContractMethod<[], [bigint], "view">;

  isOwner: TypedContractMethod<[owner: AddressLike], [boolean], "view">;

  removeOwner: TypedContractMethod<
    [prevOwner: AddressLike, owner: AddressLike, _threshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  swapOwner: TypedContractMethod<
    [prevOwner: AddressLike, oldOwner: AddressLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addOwnerWithThreshold"
  ): TypedContractMethod<
    [owner: AddressLike, _threshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeThreshold"
  ): TypedContractMethod<[_threshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getOwners"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isOwner"
  ): TypedContractMethod<[owner: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeOwner"
  ): TypedContractMethod<
    [prevOwner: AddressLike, owner: AddressLike, _threshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapOwner"
  ): TypedContractMethod<
    [prevOwner: AddressLike, oldOwner: AddressLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AddedOwner"
  ): TypedContractEvent<
    AddedOwnerEvent.InputTuple,
    AddedOwnerEvent.OutputTuple,
    AddedOwnerEvent.OutputObject
  >;
  getEvent(
    key: "ChangedThreshold"
  ): TypedContractEvent<
    ChangedThresholdEvent.InputTuple,
    ChangedThresholdEvent.OutputTuple,
    ChangedThresholdEvent.OutputObject
  >;
  getEvent(
    key: "RemovedOwner"
  ): TypedContractEvent<
    RemovedOwnerEvent.InputTuple,
    RemovedOwnerEvent.OutputTuple,
    RemovedOwnerEvent.OutputObject
  >;

  filters: {
    "AddedOwner(address)": TypedContractEvent<
      AddedOwnerEvent.InputTuple,
      AddedOwnerEvent.OutputTuple,
      AddedOwnerEvent.OutputObject
    >;
    AddedOwner: TypedContractEvent<
      AddedOwnerEvent.InputTuple,
      AddedOwnerEvent.OutputTuple,
      AddedOwnerEvent.OutputObject
    >;

    "ChangedThreshold(uint256)": TypedContractEvent<
      ChangedThresholdEvent.InputTuple,
      ChangedThresholdEvent.OutputTuple,
      ChangedThresholdEvent.OutputObject
    >;
    ChangedThreshold: TypedContractEvent<
      ChangedThresholdEvent.InputTuple,
      ChangedThresholdEvent.OutputTuple,
      ChangedThresholdEvent.OutputObject
    >;

    "RemovedOwner(address)": TypedContractEvent<
      RemovedOwnerEvent.InputTuple,
      RemovedOwnerEvent.OutputTuple,
      RemovedOwnerEvent.OutputObject
    >;
    RemovedOwner: TypedContractEvent<
      RemovedOwnerEvent.InputTuple,
      RemovedOwnerEvent.OutputTuple,
      RemovedOwnerEvent.OutputObject
    >;
  };
}
