/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ISafeExtendedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "VERSION"
      | "approveHash"
      | "checkNSignatures"
      | "checkSignatures(bytes32,bytes,bytes)"
      | "checkSignatures(bytes32,bytes)"
      | "domainSeparator"
      | "execTransaction"
      | "getModulesPaginated"
      | "getOwners"
      | "getThreshold"
      | "getTransactionHash"
      | "isOwner"
      | "nonce"
      | "setFallbackHandler"
      | "setGuard"
      | "setup"
      | "signedMessages"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approveHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkNSignatures",
    values: [AddressLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSignatures(bytes32,bytes,bytes)",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSignatures(bytes32,bytes)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execTransaction",
    values: [
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getModulesPaginated",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionHash",
    values: [
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFallbackHandler",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGuard",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setup",
    values: [
      AddressLike[],
      BigNumberish,
      AddressLike,
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signedMessages",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkNSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSignatures(bytes32,bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSignatures(bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModulesPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFallbackHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGuard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signedMessages",
    data: BytesLike
  ): Result;
}

export interface ISafeExtended extends BaseContract {
  connect(runner?: ContractRunner | null): ISafeExtended;
  waitForDeployment(): Promise<this>;

  interface: ISafeExtendedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  VERSION: TypedContractMethod<[], [string], "view">;

  approveHash: TypedContractMethod<
    [hashToApprove: BytesLike],
    [void],
    "nonpayable"
  >;

  checkNSignatures: TypedContractMethod<
    [
      executor: AddressLike,
      dataHash: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish
    ],
    [void],
    "view"
  >;

  "checkSignatures(bytes32,bytes,bytes)": TypedContractMethod<
    [dataHash: BytesLike, arg1: BytesLike, signatures: BytesLike],
    [void],
    "view"
  >;

  "checkSignatures(bytes32,bytes)": TypedContractMethod<
    [dataHash: BytesLike, signatures: BytesLike],
    [void],
    "view"
  >;

  domainSeparator: TypedContractMethod<[], [string], "view">;

  execTransaction: TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: AddressLike,
      refundReceiver: AddressLike,
      signatures: BytesLike
    ],
    [boolean],
    "payable"
  >;

  getModulesPaginated: TypedContractMethod<
    [start: AddressLike, pageSize: BigNumberish],
    [[string[], string] & { array: string[]; next: string }],
    "view"
  >;

  getOwners: TypedContractMethod<[], [string[]], "view">;

  getThreshold: TypedContractMethod<[], [bigint], "view">;

  getTransactionHash: TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: AddressLike,
      refundReceiver: AddressLike,
      _nonce: BigNumberish
    ],
    [string],
    "view"
  >;

  isOwner: TypedContractMethod<[owner: AddressLike], [boolean], "view">;

  nonce: TypedContractMethod<[], [bigint], "view">;

  setFallbackHandler: TypedContractMethod<
    [handler: AddressLike],
    [void],
    "nonpayable"
  >;

  setGuard: TypedContractMethod<[guard: AddressLike], [void], "nonpayable">;

  setup: TypedContractMethod<
    [
      _owners: AddressLike[],
      _threshold: BigNumberish,
      to: AddressLike,
      data: BytesLike,
      fallbackHandler: AddressLike,
      paymentToken: AddressLike,
      payment: BigNumberish,
      paymentReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  signedMessages: TypedContractMethod<
    [messageHash: BytesLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approveHash"
  ): TypedContractMethod<[hashToApprove: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkNSignatures"
  ): TypedContractMethod<
    [
      executor: AddressLike,
      dataHash: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkSignatures(bytes32,bytes,bytes)"
  ): TypedContractMethod<
    [dataHash: BytesLike, arg1: BytesLike, signatures: BytesLike],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkSignatures(bytes32,bytes)"
  ): TypedContractMethod<
    [dataHash: BytesLike, signatures: BytesLike],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "domainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "execTransaction"
  ): TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: AddressLike,
      refundReceiver: AddressLike,
      signatures: BytesLike
    ],
    [boolean],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getModulesPaginated"
  ): TypedContractMethod<
    [start: AddressLike, pageSize: BigNumberish],
    [[string[], string] & { array: string[]; next: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwners"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTransactionHash"
  ): TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: AddressLike,
      refundReceiver: AddressLike,
      _nonce: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isOwner"
  ): TypedContractMethod<[owner: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "nonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setFallbackHandler"
  ): TypedContractMethod<[handler: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGuard"
  ): TypedContractMethod<[guard: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setup"
  ): TypedContractMethod<
    [
      _owners: AddressLike[],
      _threshold: BigNumberish,
      to: AddressLike,
      data: BytesLike,
      fallbackHandler: AddressLike,
      paymentToken: AddressLike,
      payment: BigNumberish,
      paymentReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signedMessages"
  ): TypedContractMethod<[messageHash: BytesLike], [bigint], "view">;

  filters: {};
}
