/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SafeProxyFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createChainSpecificProxyWithNonce"
      | "createProxyWithCallback"
      | "createProxyWithNonce"
      | "getChainId"
      | "proxyCreationCode"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ProxyCreation"): EventFragment;

  encodeFunctionData(
    functionFragment: "createChainSpecificProxyWithNonce",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProxyWithCallback",
    values: [AddressLike, BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createProxyWithNonce",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxyCreationCode",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createChainSpecificProxyWithNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProxyWithCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProxyWithNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxyCreationCode",
    data: BytesLike
  ): Result;
}

export namespace ProxyCreationEvent {
  export type InputTuple = [proxy: AddressLike, singleton: AddressLike];
  export type OutputTuple = [proxy: string, singleton: string];
  export interface OutputObject {
    proxy: string;
    singleton: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SafeProxyFactory extends BaseContract {
  connect(runner?: ContractRunner | null): SafeProxyFactory;
  waitForDeployment(): Promise<this>;

  interface: SafeProxyFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createChainSpecificProxyWithNonce: TypedContractMethod<
    [_singleton: AddressLike, initializer: BytesLike, saltNonce: BigNumberish],
    [string],
    "nonpayable"
  >;

  createProxyWithCallback: TypedContractMethod<
    [
      _singleton: AddressLike,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      callback: AddressLike
    ],
    [string],
    "nonpayable"
  >;

  createProxyWithNonce: TypedContractMethod<
    [_singleton: AddressLike, initializer: BytesLike, saltNonce: BigNumberish],
    [string],
    "nonpayable"
  >;

  getChainId: TypedContractMethod<[], [bigint], "view">;

  proxyCreationCode: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createChainSpecificProxyWithNonce"
  ): TypedContractMethod<
    [_singleton: AddressLike, initializer: BytesLike, saltNonce: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createProxyWithCallback"
  ): TypedContractMethod<
    [
      _singleton: AddressLike,
      initializer: BytesLike,
      saltNonce: BigNumberish,
      callback: AddressLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createProxyWithNonce"
  ): TypedContractMethod<
    [_singleton: AddressLike, initializer: BytesLike, saltNonce: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proxyCreationCode"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ProxyCreation"
  ): TypedContractEvent<
    ProxyCreationEvent.InputTuple,
    ProxyCreationEvent.OutputTuple,
    ProxyCreationEvent.OutputObject
  >;

  filters: {
    "ProxyCreation(address,address)": TypedContractEvent<
      ProxyCreationEvent.InputTuple,
      ProxyCreationEvent.OutputTuple,
      ProxyCreationEvent.OutputObject
    >;
    ProxyCreation: TypedContractEvent<
      ProxyCreationEvent.InputTuple,
      ProxyCreationEvent.OutputTuple,
      ProxyCreationEvent.OutputObject
    >;
  };
}
