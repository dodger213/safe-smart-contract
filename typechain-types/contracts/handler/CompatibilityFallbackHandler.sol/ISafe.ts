/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ISafeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkNSignatures"
      | "checkSignatures"
      | "domainSeparator"
      | "getModulesPaginated"
      | "getThreshold"
      | "signedMessages"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkNSignatures",
    values: [AddressLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSignatures",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getModulesPaginated",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signedMessages",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkNSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModulesPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signedMessages",
    data: BytesLike
  ): Result;
}

export interface ISafe extends BaseContract {
  connect(runner?: ContractRunner | null): ISafe;
  waitForDeployment(): Promise<this>;

  interface: ISafeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkNSignatures: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike, arg2: BytesLike, arg3: BigNumberish],
    [void],
    "view"
  >;

  checkSignatures: TypedContractMethod<
    [arg0: BytesLike, arg1: BytesLike],
    [void],
    "view"
  >;

  domainSeparator: TypedContractMethod<[], [string], "view">;

  getModulesPaginated: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[string[], string]],
    "view"
  >;

  getThreshold: TypedContractMethod<[], [bigint], "view">;

  signedMessages: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkNSignatures"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike, arg2: BytesLike, arg3: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkSignatures"
  ): TypedContractMethod<[arg0: BytesLike, arg1: BytesLike], [void], "view">;
  getFunction(
    nameOrSignature: "domainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getModulesPaginated"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[string[], string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "signedMessages"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  filters: {};
}
