/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  Test4337ModuleAndHandler,
  Test4337ModuleAndHandlerInterface,
} from "../../../../contracts/test/Test4337ModuleAndHandler.sol/Test4337ModuleAndHandler";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "entryPointAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ENTRYPOINT",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MY_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "enableMyself",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "execTransaction",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "missingAccountFunds",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b50604051610a40380380610a4083398181016040528101906100329190610103565b8073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250503073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050610130565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100d0826100a5565b9050919050565b6100e0816100c5565b81146100eb57600080fd5b50565b6000815190506100fd816100d7565b92915050565b600060208284031215610119576101186100a0565b5b6000610127848285016100ee565b91505092915050565b60805160a0516108dd6101636000396000818161017c0152610373015260008181610117015261022c01526108dd6000f3fe60806040526004361061004a5760003560e01c80633a756cec1461004f5780633a871cdd1461007a578063a798b2b1146100b7578063ab4ed83e146100ce578063e8eb3cc6146100ea575b600080fd5b34801561005b57600080fd5b50610064610115565b60405161007191906103d6565b60405180910390f35b34801561008657600080fd5b506100a1600480360381019061009c919061048c565b610139565b6040516100ae919061050a565b60405180910390f35b3480156100c357600080fd5b506100cc61020e565b005b6100e860048036038101906100e391906105b6565b61029b565b005b3480156100f657600080fd5b506100ff610371565b60405161010c91906103d6565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b60008084600001602081019061014f919061062a565b9050600081905060008414610201578073ffffffffffffffffffffffffffffffffffffffff1663468721a77f00000000000000000000000000000000000000000000000000000000000000008660006040518463ffffffff1660e01b81526004016101bc939291906106e0565b6020604051808303816000875af11580156101db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ff9190610762565b505b6000925050509392505050565b3073ffffffffffffffffffffffffffffffffffffffff1663610b59257f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161026791906103d6565b600060405180830381600087803b15801561028157600080fd5b505af1158015610295573d6000803e3d6000fd5b50505050565b600033905060008190508073ffffffffffffffffffffffffffffffffffffffff1663468721a78787878760006040518663ffffffff1660e01b81526004016102e79594939291906107dc565b6020604051808303816000875af1158015610306573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032a9190610762565b610369576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036090610887565b60405180910390fd5b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103c082610395565b9050919050565b6103d0816103b5565b82525050565b60006020820190506103eb60008301846103c7565b92915050565b600080fd5b600080fd5b600080fd5b60006101608284031215610417576104166103fb565b5b81905092915050565b6000819050919050565b61043381610420565b811461043e57600080fd5b50565b6000813590506104508161042a565b92915050565b6000819050919050565b61046981610456565b811461047457600080fd5b50565b60008135905061048681610460565b92915050565b6000806000606084860312156104a5576104a46103f1565b5b600084013567ffffffffffffffff8111156104c3576104c26103f6565b5b6104cf86828701610400565b93505060206104e086828701610441565b92505060406104f186828701610477565b9150509250925092565b61050481610456565b82525050565b600060208201905061051f60008301846104fb565b92915050565b61052e816103b5565b811461053957600080fd5b50565b60008135905061054b81610525565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261057657610575610551565b5b8235905067ffffffffffffffff81111561059357610592610556565b5b6020830191508360018202830111156105af576105ae61055b565b5b9250929050565b600080600080606085870312156105d0576105cf6103f1565b5b60006105de8782880161053c565b94505060206105ef87828801610477565b935050604085013567ffffffffffffffff8111156106105761060f6103f6565b5b61061c87828801610560565b925092505092959194509250565b6000602082840312156106405761063f6103f1565b5b600061064e8482850161053c565b91505092915050565b600082825260208201905092915050565b50565b6000610678600083610657565b915061068382610668565b600082019050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006106ca6106c56106c08461068e565b6106a5565b610698565b9050919050565b6106da816106af565b82525050565b60006080820190506106f560008301866103c7565b61070260208301856104fb565b81810360408301526107138161066b565b905061072260608301846106d1565b949350505050565b60008115159050919050565b61073f8161072a565b811461074a57600080fd5b50565b60008151905061075c81610736565b92915050565b600060208284031215610778576107776103f1565b5b60006107868482850161074d565b91505092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006107bb8385610657565b93506107c883858461078f565b6107d18361079e565b840190509392505050565b60006080820190506107f160008301886103c7565b6107fe60208301876104fb565b81810360408301526108118185876107af565b905061082060608301846106d1565b9695505050505050565b600082825260208201905092915050565b7f7478206661696c65640000000000000000000000000000000000000000000000600082015250565b600061087160098361082a565b915061087c8261083b565b602082019050919050565b600060208201905081810360008301526108a081610864565b905091905056fea26469706673582212208173ab116cb7f823ee7d48e7e7d806ef8f4aa64066a40e1d94224dc5ff44a6a864736f6c63430008180033";

type Test4337ModuleAndHandlerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Test4337ModuleAndHandlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test4337ModuleAndHandler__factory extends ContractFactory {
  constructor(...args: Test4337ModuleAndHandlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    entryPointAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(entryPointAddress, overrides || {});
  }
  override deploy(
    entryPointAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(entryPointAddress, overrides || {}) as Promise<
      Test4337ModuleAndHandler & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): Test4337ModuleAndHandler__factory {
    return super.connect(runner) as Test4337ModuleAndHandler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Test4337ModuleAndHandlerInterface {
    return new Interface(_abi) as Test4337ModuleAndHandlerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): Test4337ModuleAndHandler {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as Test4337ModuleAndHandler;
  }
}
