/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  FallbackManager,
  FallbackManagerInterface,
} from "../../../contracts/base/FallbackManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "handler",
        type: "address",
      },
    ],
    name: "ChangedFallbackHandler",
    type: "event",
  },
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "handler",
        type: "address",
      },
    ],
    name: "setFallbackHandler",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class FallbackManager__factory {
  static readonly abi = _abi;
  static createInterface(): FallbackManagerInterface {
    return new Interface(_abi) as FallbackManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): FallbackManager {
    return new Contract(address, _abi, runner) as unknown as FallbackManager;
  }
}
