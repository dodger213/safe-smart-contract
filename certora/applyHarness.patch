diff -druN Safe.sol Safe.sol
--- Safe.sol	2023-08-11 07:43:36
+++ Safe.sol	2023-08-24 22:32:40
@@ -44,6 +44,8 @@
     using SafeMath for uint256;
 
     string public constant VERSION = "1.4.1";
+    address public lastOwnerStore;
+    address public currentOwnerStore;
 
     // keccak256(
     //     "EIP712Domain(uint256 chainId,address verifyingContract)"
@@ -75,7 +77,7 @@
          * so we create a Safe with 0 owners and threshold 1.
          * This is an unusable Safe, perfect for the singleton
          */
-        threshold = 1;
+        // threshold = 1; MUNGED: remove and add to constructor of the harness
     }
 
     /**
@@ -252,7 +254,7 @@
      * @param signatures Signature data that should be verified.
      *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.
      */
-    function checkSignatures(bytes32 dataHash, bytes memory data, bytes memory signatures) public view {
+    function checkSignatures(bytes32 dataHash, bytes memory data, bytes memory signatures) public {
         // Load threshold to avoid multiple storage loads
         uint256 _threshold = threshold;
         // Check that a threshold is set
@@ -280,7 +282,7 @@
         bytes memory /* data */,
         bytes memory signatures,
         uint256 requiredSignatures
-    ) public view {
+    ) public {
         // Check that the provided signature data is not too short
         require(signatures.length >= requiredSignatures.mul(65), "GS020");
         // There cannot be an owner with address 0.
@@ -338,7 +340,12 @@
                 // Use ecrecover with the messageHash for EOA signatures
                 currentOwner = ecrecover(dataHash, v, r, s);
             }
-            require(currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS, "GS026");
+            // require(currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS, "GS026");
+            lastOwnerStore = lastOwner;
+            currentOwnerStore = currentOwner;
+            require(owners[currentOwner] != address(0));
+            require(currentOwner != SENTINEL_OWNERS, "GS026");
+            require(currentOwner > lastOwner);
             lastOwner = currentOwner;
         }
     }
diff -druN base/Executor.sol base/Executor.sol
--- base/Executor.sol	2023-08-11 07:43:36
+++ base/Executor.sol	2023-08-23 11:26:37
@@ -26,11 +26,8 @@
         uint256 txGas
     ) internal returns (bool success) {
         if (operation == Enum.Operation.DelegateCall) {
-            // solhint-disable-next-line no-inline-assembly
-            /// @solidity memory-safe-assembly
-            assembly {
-                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)
-            }
+            // MUNGED lets just be a bit more optimistic, `execute` does nothing for `DELEGATECALL` and always returns true
+            return true;
         } else {
             // solhint-disable-next-line no-inline-assembly
             /// @solidity memory-safe-assembly
