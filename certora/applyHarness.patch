diff -druN Safe.sol Safe.sol
--- Safe.sol	2024-01-05 18:53:19
+++ Safe.sol	2024-01-08 15:25:22
@@ -76,7 +76,7 @@
          * so we create a Safe with 0 owners and threshold 1.
          * This is an unusable Safe, perfect for the singleton
          */
-        threshold = 1;
+        // threshold = 1; MUNGED: remove and add to constructor of the harness
     }
 
     /**
@@ -93,15 +93,17 @@
      * @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)
      */
     function setup(
-        address[] calldata _owners,
+        address[] memory _owners,
         uint256 _threshold,
         address to,
-        bytes calldata data,
+        bytes memory data,
         address fallbackHandler,
         address paymentToken,
         uint256 payment,
         address payable paymentReceiver
-    ) external {
+    ) public {
+        // MUNGED: had to change the method visibility and location of the variables to be able to call it from the harness
+        // constructor
         // setupOwners checks if the Threshold is already set, therefore preventing that this method is called twice
         setupOwners(_owners, _threshold);
         if (fallbackHandler != address(0)) internalSetFallbackHandler(fallbackHandler);
@@ -451,7 +453,8 @@
         address gasToken,
         address refundReceiver,
         uint256 _nonce
-    ) public view returns (bytes32) {
+    ) internal view returns (bytes32) {
+        // MUNGED: The function was made internal to enable CVL summaries.
         return keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));
     }
 }
diff -druN base/Executor.sol base/Executor.sol
--- base/Executor.sol	2024-01-05 18:53:19
+++ base/Executor.sol	2024-01-08 15:25:22
@@ -26,12 +26,8 @@
         uint256 txGas
     ) internal returns (bool success) {
         if (operation == Enum.Operation.DelegateCall) {
-            /* solhint-disable no-inline-assembly */
-            /// @solidity memory-safe-assembly
-            assembly {
-                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)
-            }
-            /* solhint-enable no-inline-assembly */
+            // MUNGED lets just be a bit more optimistic, `execute` does nothing for `DELEGATECALL` and always returns true
+            return true;
         } else {
             /* solhint-disable no-inline-assembly */
             /// @solidity memory-safe-assembly
